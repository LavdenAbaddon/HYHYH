<!DOCTYPE html>
<html>
  <body>
    <div data-behavior='room-info' data-room-id='<%= current_user.room.id %>'>
      <h4>
        room_name:<%= current_user.room.room_name %>      
        host:<%= current_user.room.host_id%>
      </h4>
    </div> 
    <div id="container">
      <div id="player"></div>
      <div id="message-wr">
        <%= render 'messages' %>
        <%= render 'message_form' %>
      </div>
    </div>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <span id="play" class="material-icons">play_arrow</span>
    <span id="pause" class="material-icons">pause</span>
    <p>
      <span >status:</span>
      <span id="player-status">stopped</span>
      <span id="current-time"></span>
      <span > / </span>
      <span id="duration"></span>
    </p>
    <input type="range" id="progress-bar" value="0">

    <script>
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // This function creates an <iframe> (and YouTube player) after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'M7lc1UVf-VE',
          events: {
            'onReady': initialize,
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function initialize(){
        // Update the controls on load
        updateTimerDisplay();
        updateProgressBar();
        // Clear any old interval.
        // clearInterval(time_update_interval);
        // Start interval to update elapsed time display and
        // the elapsed part of the progress bar every second.
        time_update_interval = setInterval(function () {
            updateTimerDisplay();
            updateProgressBar();
            if($('#player-status').text() === "playing") {
              player.playVideo();
            }
            if($('#player-status').text() === "pulsed") {
              player.pauseVideo();
            }
        }, 1000)

      }

      // This function is called by initialize()
      function updateTimerDisplay(){
        // Update current time text display.
        $('#current-time').text(formatTime( player.getCurrentTime() ));
        $('#duration').text(formatTime( player.getDuration() ));
      }
      
      function formatTime(time){
        time = Math.round(time);
        var minutes = Math.floor(time / 60),
        seconds = time - minutes * 60;
        seconds = seconds < 10 ? '0' + seconds : seconds;
        return minutes + ":" + seconds;
      }

      $('#progress-bar').on('mouseup touchend', function (e) {
        // Calculate the new time for the video.
        // new time in seconds = total duration in seconds * ( value of range input / 100 )
        var newTime = player.getDuration() * (e.target.value / 100);

        // Skip video to new time.
        player.seekTo(newTime);
      });

      // This function is called by initialize()
      function updateProgressBar(){
        // Update the value of our progress bar accordingly.
        $('#progress-bar').val((player.getCurrentTime() / player.getDuration()) * 100);
      }
      $('#play').on('click', function () {
        player.playVideo();
        $('#player-status').text("playing")
      });
      $('#pause').on('click', function () {
        player.pauseVideo();
        $('#player-status').text("pulsed")
      });


    </script>
  </body>
</html>

